WEBVTT

0
00:00:01,200 --> 00:00:04,650
Hey there, welcome back to
Intermediate ASP.NET Core.

1
00:00:04,651 --> 00:00:06,150
My name is Jeff Fritz.

2
00:00:06,151 --> 00:00:06,960
>> And I'm Jon Galloway.

3
00:00:08,160 --> 00:00:09,100
>> And
we're gonna talk to you for

4
00:00:09,101 --> 00:00:12,550
a little bit about tag
helpers in this module.

5
00:00:12,551 --> 00:00:15,150
Jon, we've been hearing
a lot about tag helpers.

6
00:00:15,151 --> 00:00:16,470
What the heck are tag helpers?

7
00:00:16,471 --> 00:00:17,600
>> I think tag
helpers are great.

8
00:00:17,601 --> 00:00:21,110
The cool thing with tag
helpers is they kind of get

9
00:00:21,111 --> 00:00:22,330
out of your way.

10
00:00:22,331 --> 00:00:25,050
>> So they make it easier for
me to write markup,

11
00:00:25,051 --> 00:00:28,480
the HTML looking markup that's
doing stuff on my server.

12
00:00:28,481 --> 00:00:30,050
And it's very lightweight.

13
00:00:30,051 --> 00:00:31,580
>> Mm.
>> So it kind of almost,

14
00:00:31,581 --> 00:00:33,100
you know,
it's nice to know about but

15
00:00:33,101 --> 00:00:35,470
for the most part it just kind
of fades into the background.

16
00:00:35,471 --> 00:00:39,695
But we'll be showing how
you'll be using tag helpers in

17
00:00:39,696 --> 00:00:41,570
a file new project.

18
00:00:41,571 --> 00:00:44,090
We'll dig into a little bit of
writing our own tag helper.

19
00:00:44,091 --> 00:00:44,680
>> Okay.
>> Which is

20
00:00:44,681 --> 00:00:46,230
really easy actually.

21
00:00:46,231 --> 00:00:48,810
And then after we've done that
we'll look at some third party

22
00:00:48,811 --> 00:00:51,260
tag helpers, some things that
other developers have written

23
00:00:51,261 --> 00:00:52,810
that I can start using.

24
00:00:52,811 --> 00:00:54,310
And we'll look at
their search code too.

25
00:00:54,311 --> 00:00:56,500
>> Cool.
>> So let's get started,

26
00:00:56,501 --> 00:00:57,830
if we can go to my screen.

27
00:00:59,180 --> 00:01:02,410
We're going to be
working off of the docs.

28
00:01:02,411 --> 00:01:05,380
So everything I'm going
to be showing here is in

29
00:01:05,381 --> 00:01:08,110
the docs at docs.microsoft.com.

30
00:01:08,111 --> 00:01:11,540
So, this starts off with
a simple, what is a tag helper?

31
00:01:11,541 --> 00:01:14,210
Hopefully, this says something
pretty similar to what I just

32
00:01:14,211 --> 00:01:14,750
explained.

33
00:01:14,751 --> 00:01:18,600
Things like this, HTML
friendly developer experience,

34
00:01:18,601 --> 00:01:21,990
giving me IntelliSense etcetera.

35
00:01:21,991 --> 00:01:24,740
And then we're gonna be
showing authoring tag helpers,

36
00:01:24,741 --> 00:01:26,150
that's written up in here.

37
00:01:26,151 --> 00:01:28,780
So if I'm talking too fast or
not making sense,

38
00:01:28,781 --> 00:01:31,535
you can read the docs and
that's gonna work well for you.

39
00:01:31,536 --> 00:01:35,960
[LAUGH] So I'm gonna start
with Web application 24.

40
00:01:35,961 --> 00:01:38,450
This is literally
file new project.

41
00:01:38,451 --> 00:01:41,420
>> It's so much better than
web applications 1 through 20.

42
00:01:41,421 --> 00:01:42,990
>> Those ones, throw them away.

43
00:01:42,991 --> 00:01:44,050
>> They're garbage.

44
00:01:44,051 --> 00:01:45,200
>> We're gonna ship this.

45
00:01:45,201 --> 00:01:46,715
>> Modern new, all right.

46
00:01:46,716 --> 00:01:48,765
>> What I need you to do
while I'm talking is if you

47
00:01:48,766 --> 00:01:53,265
an register webapplication24.com
.edu and .org.

48
00:01:53,266 --> 00:01:54,480
>> I'm on it.
>> Because this is it,

49
00:01:54,481 --> 00:01:55,645
we're gonna IPO.

50
00:01:55,646 --> 00:01:59,035
So I've gone through and
I've done file new project,

51
00:01:59,036 --> 00:02:00,660
literally that's it.

52
00:02:00,661 --> 00:02:05,110
And I did this using, I turned
on individual authentication.

53
00:02:05,111 --> 00:02:08,790
I did that partly because I want
to show off some things that

54
00:02:08,791 --> 00:02:13,100
are in the account
management system.

55
00:02:13,101 --> 00:02:16,930
Because this is a great
example of where tag

56
00:02:16,931 --> 00:02:18,680
helpers can simplify my markup.

57
00:02:18,681 --> 00:02:22,470
So I'm going to be looking in
this manage directory to start.

58
00:02:22,471 --> 00:02:24,380
>> Okay.
>> So this is stuff for

59
00:02:24,381 --> 00:02:28,230
when I've created,
I wanna register in a user.

60
00:02:28,231 --> 00:02:31,270
So I got into
the register page and

61
00:02:31,271 --> 00:02:35,400
you'll see some things in here
that some kind of purple markup.

62
00:02:35,401 --> 00:02:37,720
So they look similar to
the other things but

63
00:02:37,721 --> 00:02:41,215
here like this form,
if we look at that, that has a,

64
00:02:41,216 --> 00:02:45,400
it's kind of purplish and-
>> It's also bold for

65
00:02:45,401 --> 00:02:47,690
anybody who's color blind so
they can see it as well.

66
00:02:47,691 --> 00:02:48,450
>> That's nice, right?

67
00:02:48,451 --> 00:02:49,970
And you can go in and
change these too, by the way.

68
00:02:49,971 --> 00:02:50,560
>> Absolutely.

69
00:02:50,561 --> 00:02:52,320
>> You can go in and
set those differently.

70
00:02:52,321 --> 00:02:55,270
And as I mouse over this,
this shows some things that

71
00:02:55,271 --> 00:02:57,460
are different like
here this is just HTML.

72
00:02:57,461 --> 00:02:59,460
This just says it's
a div element.

73
00:02:59,461 --> 00:03:01,346
>> Great.
>> It's very, very simple.

74
00:03:01,347 --> 00:03:05,090
IntelSense for form actually
says this is related to a form,

75
00:03:05,091 --> 00:03:09,864
and if I mouse over this
asp-route-returnUrl, that

76
00:03:09,865 --> 00:03:13,980
actually tells me, this is a
generic IDictionary and it also

77
00:03:13,981 --> 00:03:16,660
explains some things, additional
parameters for our route.

78
00:03:16,661 --> 00:03:19,420
>> I didn't know HTML could
handle IDictionaries.

79
00:03:19,421 --> 00:03:21,980
>> Aha, see and it can't, right?

80
00:03:21,981 --> 00:03:24,996
So that's an important thing
that you've called out there.

81
00:03:24,997 --> 00:03:29,260
Is that these things, this is
not the HTML that's gonna be

82
00:03:29,261 --> 00:03:30,820
rendered out to the browser.

83
00:03:30,821 --> 00:03:36,490
So in fact, if I just run this,
we'll look at,

84
00:03:36,491 --> 00:03:38,930
if we look at I guess I
can go to register and

85
00:03:38,931 --> 00:03:40,390
we could just view source,
right?

86
00:03:40,391 --> 00:03:41,220
>> Sure.

87
00:03:41,221 --> 00:03:44,530
>> See and I'm already going off
script, but that's just fine.

88
00:03:44,531 --> 00:03:48,300
Yes, let's install, so
I recommend, I was gonna joke

89
00:03:48,301 --> 00:03:51,230
about installing any certificate
that requests to install, but

90
00:03:51,231 --> 00:03:53,220
that's probably bad advice.

91
00:03:53,221 --> 00:03:56,770
In this case though, this is
actually, this is a it's setting

92
00:03:56,771 --> 00:03:59,380
up an SSL search and
trusting it locally so

93
00:03:59,381 --> 00:04:01,680
I can develop against
HTTPS which is cool.

94
00:04:01,681 --> 00:04:04,379
>> Right, this is a Visual
Studio feature that allows

95
00:04:04,380 --> 00:04:05,390
us to use SSL.

96
00:04:05,391 --> 00:04:08,670
>> Yep so here I'm
clicking on register, and

97
00:04:08,671 --> 00:04:11,620
this is exactly that same thing
I was looking at before, and

98
00:04:11,621 --> 00:04:14,160
if I go in and view source, and

99
00:04:14,161 --> 00:04:19,710
if we look at that form, we'll
find that form is rendered.

100
00:04:19,711 --> 00:04:25,210
>> There's our nav bar,
there's form, form right.

101
00:04:25,211 --> 00:04:27,880
>> So
if we zoom in on that we'll see

102
00:04:30,675 --> 00:04:35,425
that form says method post
action is Account/Register.

103
00:04:35,426 --> 00:04:37,535
>> That's a normal
HTML form there.

104
00:04:37,536 --> 00:04:41,405
>> That's normal,
this is straight up HTML, right?

105
00:04:43,185 --> 00:04:48,440
But if we flip over to here,
you'll see.

106
00:04:48,441 --> 00:04:52,235
This is what we've
got in my Razor code.

107
00:04:52,236 --> 00:04:53,390
>> Mm-hm.
>> Method is post,

108
00:04:53,391 --> 00:04:56,390
it didn't change that, but this
ReturnUrl where this is gonna be

109
00:04:56,391 --> 00:05:01,040
posted to, that is something
that the server asp.net,

110
00:05:01,041 --> 00:05:09,033
looked at this and converted it
to action = /Account/Register.

111
00:05:09,034 --> 00:05:09,810
>> Okay.

112
00:05:09,811 --> 00:05:11,240
>> So
what's important about that is,

113
00:05:12,800 --> 00:05:15,780
where this form is being
posted to could change

114
00:05:15,781 --> 00:05:17,770
based on how my
routing is set up.

115
00:05:17,771 --> 00:05:19,220
>> Sure.
>> Based on if this is,

116
00:05:19,221 --> 00:05:21,903
if I'm using the NBC route or
if I'm going in and

117
00:05:21,904 --> 00:05:24,490
changing my routes,
that could vary.

118
00:05:24,491 --> 00:05:25,210
>> Okay.

119
00:05:25,211 --> 00:05:29,724
>> So other things here like as
we look further down in this,

120
00:05:29,725 --> 00:05:33,710
we've got label
asp-for="Input.Email".

121
00:05:33,711 --> 00:05:38,733
So this is using my input model,
and we've seen about

122
00:05:38,734 --> 00:05:43,610
models in some previous
sessions and all that.

123
00:05:43,611 --> 00:05:47,377
So this is using my e-mail
field on my input model and

124
00:05:47,378 --> 00:05:49,443
it's saying binds to that.

125
00:05:49,444 --> 00:05:54,431
If we look at what we're
actually seeing on these,

126
00:05:54,432 --> 00:05:58,376
this is saying which
control is it even?

127
00:05:58,377 --> 00:05:59,750
Data val email.

128
00:05:59,751 --> 00:06:01,720
>> Is that it on line 53?

129
00:06:01,721 --> 00:06:05,820
>> 53, there you go, so it's
Input_Email let me zoom on that.

130
00:06:05,821 --> 00:06:07,570
So that is here, Input_Email,

131
00:06:07,571 --> 00:06:11,790
or some people say underbar,
either one works, right?

132
00:06:11,791 --> 00:06:12,410
>> Sure.
>> So

133
00:06:12,411 --> 00:06:15,330
the important thing
is if I change that,

134
00:06:15,331 --> 00:06:19,070
I could make a change
to that in my model and

135
00:06:19,071 --> 00:06:22,850
again it's going to
figure out that for me.

136
00:06:22,851 --> 00:06:26,120
So the nice thing that we're
seeing with this, is that we're

137
00:06:26,121 --> 00:06:32,320
able to write server-side
code inside our Razor code,

138
00:06:32,321 --> 00:06:36,150
and we can do it in a way
that still is readable here,

139
00:06:36,151 --> 00:06:38,280
it's not kind of
jumping back and forth.

140
00:06:38,281 --> 00:06:41,380
>> So that label tag
helper you showed us,

141
00:06:41,381 --> 00:06:44,070
it says asp-for="Input.Email",
so

142
00:06:44,071 --> 00:06:46,840
it's looking at that email
property and it's going to

143
00:06:46,841 --> 00:06:52,610
figure out what type of label to
generate based on that property.

144
00:06:52,611 --> 00:06:53,320
>> Exactly.

145
00:06:53,321 --> 00:06:53,880
>> Okay.
>> So

146
00:06:53,881 --> 00:06:56,140
it's generating
HTML based on that.

147
00:06:56,141 --> 00:06:57,500
So the important things
we've learned so

148
00:06:57,501 --> 00:07:02,620
far is that bold purple
means that is a tag helper.

149
00:07:02,621 --> 00:07:05,270
>> Okay.
>> And that is going to evaluate

150
00:07:05,271 --> 00:07:08,550
something on the server and
probably change the HTML,

151
00:07:08,551 --> 00:07:13,040
and if I see something that's
an asp-, that is probably not

152
00:07:13,041 --> 00:07:15,442
gonna be, it's not gonna
render that on the client.

153
00:07:15,443 --> 00:07:17,540
The clients aren't
gonna see asp- but

154
00:07:17,541 --> 00:07:21,875
they're gonna possibly see some
other HTML that's generated.

155
00:07:21,876 --> 00:07:22,550
>> Okay.

156
00:07:22,551 --> 00:07:25,260
>> So we've learned that and
that's interesting.

157
00:07:25,261 --> 00:07:29,030
We're looking here at a div tag
helper and a form tag helper.

158
00:07:29,031 --> 00:07:31,780
There are other tag
helpers that don't even

159
00:07:31,781 --> 00:07:34,900
match up to anything in HTML.

160
00:07:34,901 --> 00:07:38,028
>> So those ones were tag
helpers that were actually

161
00:07:38,029 --> 00:07:39,100
attributes.

162
00:07:39,101 --> 00:07:40,650
>> Yes.
>> That decorated

163
00:07:40,651 --> 00:07:41,480
different elements.

164
00:07:41,481 --> 00:07:42,340
>> Exactly.

165
00:07:42,341 --> 00:07:45,920
These are tag helpers that
work at a higher level.

166
00:07:45,921 --> 00:07:49,230
This is, for instance,
an environment tag helper.

167
00:07:49,231 --> 00:07:51,250
>> So there is no
environment tag in HTML5.

168
00:07:51,251 --> 00:07:54,300
>> Right, and when we run this,
if you looked in there,

169
00:07:54,301 --> 00:07:55,820
you would not see any of this.

170
00:07:55,821 --> 00:07:58,350
There's no HTML output.

171
00:07:58,351 --> 00:07:59,410
Well, there kind of is.

172
00:07:59,411 --> 00:08:02,420
Here I guess I need
to run it again.

173
00:08:02,421 --> 00:08:04,060
So, what this is solving for

174
00:08:04,061 --> 00:08:09,618
me is when I'm running locally-
>> Uh-huh.

175
00:08:09,619 --> 00:08:14,824
>> I wanna pull my CSS like
directly off my file system.

176
00:08:14,825 --> 00:08:15,689
>> Sure.

177
00:08:15,690 --> 00:08:19,817
>> When I'm running in
production however I wanna try

178
00:08:19,818 --> 00:08:22,605
to, We put those
files after CDN.

179
00:08:22,606 --> 00:08:26,215
And that includes the CSS here,
up to the top of the page and

180
00:08:26,216 --> 00:08:29,620
then also way down the bottom,
my JavaScript as well.

181
00:08:29,621 --> 00:08:32,006
We've got matching
environment text down there,

182
00:08:32,007 --> 00:08:33,955
[CROSSTALK] development and
production.

183
00:08:33,956 --> 00:08:36,268
>> And we learned in our
previous module all about

184
00:08:36,269 --> 00:08:39,335
the different environments
that folks can configure.

185
00:08:39,336 --> 00:08:41,965
By default, they get development
when they're in Visual Studio,

186
00:08:41,966 --> 00:08:43,645
if they don't define
an environment,

187
00:08:43,646 --> 00:08:45,015
they get production.

188
00:08:45,016 --> 00:08:48,582
So I'm guessing that the second
environment tag on 54 where it

189
00:08:48,583 --> 00:08:53,072
says, exclude development,
that's how those CDN references

190
00:08:53,073 --> 00:08:54,662
are gonna be used
in Visual Studio.

191
00:08:54,663 --> 00:08:57,362
>> Exactly, so
what this is saying is when I'm

192
00:08:57,363 --> 00:09:00,952
running locally, it's gonna say,
yeah, you're in development and

193
00:09:00,953 --> 00:09:03,172
it's just going to look
directly on my file system and

194
00:09:03,173 --> 00:09:04,330
pull these in.

195
00:09:04,331 --> 00:09:07,963
When I'm running anywhere else,
so production, or

196
00:09:07,964 --> 00:09:12,020
if I define a staging or test or
Jeff's fancy environment.

197
00:09:12,021 --> 00:09:14,430
>> I've got fancy environments,
let me tell you.

198
00:09:14,431 --> 00:09:15,769
>> [LAUGH] It's gonna
use these ones.

199
00:09:15,770 --> 00:09:17,200
>> Okay.

200
00:09:17,201 --> 00:09:20,560
>> And this is actually a nice
feature they just recently

201
00:09:20,561 --> 00:09:22,390
included here in
the 2.0 releases.

202
00:09:22,391 --> 00:09:25,392
This whole include, exclude
that makes it very easy with

203
00:09:25,393 --> 00:09:27,392
the exclude to say
anything except for

204
00:09:27,393 --> 00:09:29,157
development pull these ones in.

205
00:09:29,158 --> 00:09:31,104
>> Gotcha.
>> So I don't even need to know

206
00:09:31,105 --> 00:09:35,290
upfront what they're gonna be
just anything but development.

207
00:09:35,291 --> 00:09:38,340
>> But I can specify multiple
values for that right?

208
00:09:38,341 --> 00:09:42,847
>> Exactly, so I can up here I
could say, include development,

209
00:09:42,848 --> 00:09:45,485
testing, whatever it is, right?

210
00:09:45,486 --> 00:09:46,021
>> Okay.
>> So

211
00:09:46,022 --> 00:09:49,997
now let's take a look
at source for that and

212
00:09:49,998 --> 00:09:55,090
if we look at our CSS,
find our CSS references in here.

213
00:09:55,091 --> 00:09:56,990
>> There they are right there.

214
00:09:56,991 --> 00:09:58,980
>> There they are.

215
00:09:58,981 --> 00:10:03,818
So you'll see this knows that
because we're, It's only

216
00:10:03,819 --> 00:10:10,080
evaluating the environment
tag that's for development.

217
00:10:10,081 --> 00:10:12,420
>> Right, so because
this is development mode,

218
00:10:13,500 --> 00:10:16,580
the development environment,
it only included those

219
00:10:16,581 --> 00:10:20,080
HTML mark up items that were
inside the environment tag.

220
00:10:20,081 --> 00:10:22,570
>> Exactly, so that's that.

221
00:10:22,571 --> 00:10:26,037
>> Now, those tag helpers, they
don't modify anything else on

222
00:10:26,038 --> 00:10:28,720
the rest of the page, do they?

223
00:10:28,721 --> 00:10:32,490
>> So they're generally confined
to that area there, right?

224
00:10:32,491 --> 00:10:35,350
And one interesting thing here
though is that they do kind of

225
00:10:35,351 --> 00:10:36,430
nest.

226
00:10:36,431 --> 00:10:39,100
So you see here we've
got an environment tag,

227
00:10:39,101 --> 00:10:42,740
inside the environment tag,
I've got a script tag.

228
00:10:42,741 --> 00:10:43,710
>> Yeah,
look at that one in purple.

229
00:10:43,711 --> 00:10:46,127
>> And this script tag, this is
doing something interesting.

230
00:10:46,128 --> 00:10:52,460
It's modifying by using
asp-append-version.

231
00:10:52,461 --> 00:10:55,370
So what this does is it solves
a common problem where you have

232
00:10:55,371 --> 00:10:57,920
to version script references.

233
00:10:57,921 --> 00:10:59,290
Otherwise, CDNs or

234
00:10:59,291 --> 00:11:02,500
browsers will just cache
the previous one that I serve.

235
00:11:02,501 --> 00:11:06,040
And I can go in and change my
JavaScript and the browser is

236
00:11:06,041 --> 00:11:08,560
gonna say, I've already got
this one cache locally.

237
00:11:08,561 --> 00:11:10,820
>> So this generates
that cache plaster token.

238
00:11:10,821 --> 00:11:16,160
>> Exactly, so if I go in,
let's take a look at that.

239
00:11:16,161 --> 00:11:18,780
So it depends, I may not
be serving those locally,

240
00:11:18,781 --> 00:11:19,629
I'm not even sure.

241
00:11:20,940 --> 00:11:22,200
I am.

242
00:11:22,201 --> 00:11:24,620
>> There it is.
>> So here if we look at this,

243
00:11:25,678 --> 00:11:31,990
We'll see my site.js has v= and
it's generated a version number.

244
00:11:31,991 --> 00:11:35,290
And that's exactly it,
it's cache bust, right?

245
00:11:35,291 --> 00:11:37,420
So if I go in and
change that JavaScript,

246
00:11:37,421 --> 00:11:40,070
it's going to keep
incrementing that.

247
00:11:40,071 --> 00:11:43,190
So the important thing we've
learned off of that is that

248
00:11:43,191 --> 00:11:45,540
these can be nested.

249
00:11:45,541 --> 00:11:49,040
I can use an environment,
I can put inside the other ones,

250
00:11:49,041 --> 00:11:50,440
and I can use those
to control things.

251
00:11:50,441 --> 00:11:51,780
>> Okay.
>> For any of these,

252
00:11:51,781 --> 00:11:54,705
if I wanna understand
what it's doing,

253
00:11:54,706 --> 00:11:58,576
I've got both IntelliSense
here and I've also got,

254
00:11:58,577 --> 00:12:01,250
if we go back to
these docs here.

255
00:12:01,251 --> 00:12:04,149
It actually has this whole
section here on built-in tag

256
00:12:04,150 --> 00:12:05,200
helpers.

257
00:12:05,201 --> 00:12:06,640
And it's gonna explain,

258
00:12:06,641 --> 00:12:09,005
here is the different tag
helpers that are included and

259
00:12:09,006 --> 00:12:11,130
here's the different kinda
features that are available.

260
00:12:12,130 --> 00:12:15,190
So that's pretty cool,
right off the bat.

261
00:12:15,191 --> 00:12:17,890
Now, another thing that's
neat is I can actually

262
00:12:17,891 --> 00:12:19,350
write my own tag helpers.

263
00:12:20,440 --> 00:12:25,660
Before I show that, I want to
show one last important gotcha,

264
00:12:25,661 --> 00:12:32,070
which is that in order to
reference, in order for these

265
00:12:32,071 --> 00:12:36,090
tag helpers to become active,
they're actually listed in here.

266
00:12:36,091 --> 00:12:38,470
So I try to remember,
sometimes I forget but

267
00:12:38,471 --> 00:12:41,570
this is where these are actually
kind of lit up, right?

268
00:12:41,571 --> 00:12:43,930
So this here,
this Mvc.TagHelpers,

269
00:12:43,931 --> 00:12:46,980
any TagHelpers are kind
of turned on there, cool?

270
00:12:46,981 --> 00:12:50,193
>> So can we look at that
view imports one more time?

271
00:12:50,194 --> 00:12:50,699
>> Yeah.

272
00:12:50,700 --> 00:12:53,669
>> So you have *, and then
Microsoft.AspNetCore.Mvc.TagHel-

273
00:12:53,670 --> 00:12:55,890
pers, that's the assembly
that they leave in.

274
00:12:55,891 --> 00:12:57,780
>> That's the assembly, right.

275
00:12:57,781 --> 00:13:00,800
And I've actually recently,
I made this mistake, right.

276
00:13:00,801 --> 00:13:02,280
I pulled in a namespace or

277
00:13:02,281 --> 00:13:05,320
something else, it's actually
the assembly that's important.

278
00:13:05,321 --> 00:13:08,910
>> So it looks like a normal way
that we would reference a type.

279
00:13:08,911 --> 00:13:11,570
But by using that wild card in
front of the comma, we're saying

280
00:13:11,571 --> 00:13:14,570
give me all those tag helpers
that are in that assembly.

281
00:13:14,571 --> 00:13:15,870
>> Exactly.
>> Okay, got it.

282
00:13:15,871 --> 00:13:19,043
>> So this lights up all the tag
helpers in the MVC assembly.

283
00:13:19,044 --> 00:13:20,590
>> Okay.

284
00:13:20,591 --> 00:13:23,799
>> So let's go an write our
own TagHelper because they're

285
00:13:23,800 --> 00:13:25,445
actually relatively easy.

286
00:13:25,446 --> 00:13:29,386
I'm going to write
a repeat TagHelper and

287
00:13:29,387 --> 00:13:34,790
this is TagHelper that is an
icon nest markup inside it and

288
00:13:34,791 --> 00:13:40,240
it's just going to repeat
it however many times.

289
00:13:40,241 --> 00:13:43,267
Not incredibly useful for my
production websites but useful

290
00:13:43,268 --> 00:13:46,070
to kinda learn the ins and
outs of creating a TagHelper.

291
00:13:46,071 --> 00:13:50,377
>> Sure, maybe I'll need to
generate just some text to fill

292
00:13:50,378 --> 00:13:52,720
a page so I can measure things.

293
00:13:52,721 --> 00:13:55,255
>> Yeah, and you can imagine you
could create like a Lorem Ipsum

294
00:13:55,256 --> 00:13:56,756
tag helper, or whatever, right?

295
00:13:56,757 --> 00:13:58,100
>> Sure.

296
00:13:58,101 --> 00:14:01,070
>> So I'm creating a class, and
I'm just putting it in the root.

297
00:14:01,071 --> 00:14:04,010
But I'd recommend putting
in something like a tag

298
00:14:04,011 --> 00:14:05,900
helpers folder or organize it.

299
00:14:05,901 --> 00:14:07,250
>> It makes sense.

300
00:14:07,251 --> 00:14:10,630
>> And tag helpers can also be
including in a NuGet package or

301
00:14:10,631 --> 00:14:12,700
they can be in a separate
assembly, right?

302
00:14:12,701 --> 00:14:16,283
We just saw that in the imports,
so you could create a Jeff's

303
00:14:16,284 --> 00:14:19,742
favorite tag helpers assembly
and pull that in wherever.

304
00:14:19,743 --> 00:14:20,670
>> Okay.

305
00:14:20,671 --> 00:14:26,640
>> So I start by creating
a class and, Here's my class.

306
00:14:26,641 --> 00:14:32,296
So I'm going to inherit
from tag helper, And

307
00:14:32,297 --> 00:14:37,948
I'm gonna control that to
bring in the TagHelpers,

308
00:14:37,949 --> 00:14:40,650
the namespace up there.

309
00:14:40,651 --> 00:14:41,850
Yeah, the using statement.

310
00:14:41,851 --> 00:14:44,748
So the first thing I'm gonna
wanna do is I want to repeat

311
00:14:44,749 --> 00:14:46,940
something a certain
number of times.

312
00:14:46,941 --> 00:14:51,009
So I'm gonna type creative
property and using the snippet

313
00:14:51,010 --> 00:14:54,430
for properties,
which I very much like.

314
00:14:54,431 --> 00:14:55,970
And so
I'm using an integer here.

315
00:14:57,120 --> 00:15:02,400
Now the next thing is I need
to override one method that

316
00:15:02,401 --> 00:15:04,980
it's not that hard and
you'll find it in the docs.

317
00:15:04,981 --> 00:15:09,507
But I'll show you a little
trick that I use here,

318
00:15:09,508 --> 00:15:14,256
which is, you can go in and
if I do Peak Definition,

319
00:15:14,257 --> 00:15:18,027
which is a new feature
in Visual Studio.

320
00:15:18,028 --> 00:15:20,083
I'm gonna scroll down here and

321
00:15:20,084 --> 00:15:23,680
I'm gonna look there's
a ProcessAsync.

322
00:15:23,681 --> 00:15:27,100
>> So what we're seeing
in that window is-

323
00:15:27,101 --> 00:15:28,210
>> This is the code for,

324
00:15:28,211 --> 00:15:29,567
this is the definition for

325
00:15:29,568 --> 00:15:31,980
the actual TagHelper
that we're extending.

326
00:15:31,981 --> 00:15:33,514
>> The abstract class
called TagHelper.

327
00:15:33,515 --> 00:15:35,180
>> Exactly, exactly.

328
00:15:35,181 --> 00:15:36,607
>> Okay.
>> So the TagHelper

329
00:15:36,608 --> 00:15:40,172
abstract class has this
process async method.

330
00:15:40,173 --> 00:15:41,580
>> Okay.

331
00:15:41,581 --> 00:15:45,130
So I'm looking at
that declaration and

332
00:15:45,131 --> 00:15:47,710
I'm going to use that as kind of
the start of what I'm gonna be

333
00:15:47,711 --> 00:15:49,160
writing, right?

334
00:15:49,161 --> 00:15:50,640
>> It makes sense.
>> So instead of virtual,

335
00:15:50,641 --> 00:15:51,820
I'm gonna override.

336
00:15:53,947 --> 00:15:57,431
And I want to make this async.

337
00:15:57,432 --> 00:16:02,353
And the only thing that should
be complaining at this point is

338
00:16:02,354 --> 00:16:05,257
that I'm not returning anything.

339
00:16:06,939 --> 00:16:10,830
So, my step at this point is I'm
just going to use a for loop.

340
00:16:10,831 --> 00:16:12,630
>> Mm-hm.

341
00:16:12,631 --> 00:16:14,268
>> And,
because I'm repeating for

342
00:16:14,269 --> 00:16:16,041
a certain number of times,
right.

343
00:16:16,042 --> 00:16:20,317
So again, here I'm gonna say
from one to a Count, And

344
00:16:20,318 --> 00:16:21,500
that's it.

345
00:16:21,501 --> 00:16:23,990
So now I need to
actually write my code.

346
00:16:23,991 --> 00:16:27,230
And it should just be one line
of code that I have to write.

347
00:16:27,231 --> 00:16:28,148
So I'm gonna say-
>> And

348
00:16:28,149 --> 00:16:31,990
this code will
generate the HTML?

349
00:16:31,991 --> 00:16:33,610
>> Exactly.
>> Okay.

350
00:16:33,611 --> 00:16:37,438
>> So the way this process async
works is it gets called it's

351
00:16:37,439 --> 00:16:40,388
an async method and
it just needs to output or

352
00:16:40,389 --> 00:16:41,758
change my content.

353
00:16:41,759 --> 00:16:46,335
So I'm gonna say output.,
if I can spell output,

354
00:16:46,336 --> 00:16:49,000
dot, and then I'll say get.

355
00:16:49,001 --> 00:16:55,472
Let me see, I'm forgetting,
actually, which one it is.

356
00:16:55,473 --> 00:16:59,441
output.Content, that's it,
.AppendHtml, and

357
00:16:59,442 --> 00:17:02,535
there's some other
things I can append.

358
00:17:02,536 --> 00:17:07,154
In this case, I'm doing
AppendHtml, but I could do, for

359
00:17:07,155 --> 00:17:12,153
instance, AppendFormat, and
I can use a formatting method,

360
00:17:12,154 --> 00:17:12,829
right?

361
00:17:12,830 --> 00:17:17,374
And so
now I need to say output., and

362
00:17:17,375 --> 00:17:21,781
I will say GetChildContentAsync.

363
00:17:21,782 --> 00:17:25,134
The reason I'm doing that is my
tag is gonna work sort of like

364
00:17:25,135 --> 00:17:27,628
that environment tag
we looked at earlier.

365
00:17:27,629 --> 00:17:31,597
So it's gonna say everything
inside of this tag, I need

366
00:17:31,598 --> 00:17:36,170
to get that content, and so
this is how I'm accessing that.

367
00:17:36,171 --> 00:17:39,755
And then one other thing is I
need to use an override here,

368
00:17:39,756 --> 00:17:42,371
and I'm going to say
useCachedResult and

369
00:17:42,372 --> 00:17:48,090
I'm gonna say false.. So-

370
00:17:48,091 --> 00:17:49,036
>> That's an async method.

371
00:17:49,037 --> 00:17:50,640
We need to await it, right?

372
00:17:50,641 --> 00:17:51,420
>> You're right.

373
00:17:54,189 --> 00:17:54,960
>> Fantastic.
>> And I think we're all happy.

374
00:17:57,145 --> 00:17:59,655
Okay, so let's talk about
this code we just wrote.

375
00:17:59,656 --> 00:18:02,165
So we wrote a Repeat Tag Helper.

376
00:18:02,166 --> 00:18:04,721
So it's called RepeatTagHelper,
and

377
00:18:04,722 --> 00:18:07,824
it inherits from
the TagHelper abstract base.

378
00:18:07,825 --> 00:18:11,338
Because of that, this is a
RepeatTagHelper, I can go in and

379
00:18:11,339 --> 00:18:13,745
just start using Repeat
as a tag helper.

380
00:18:13,746 --> 00:18:14,715
We'll see that in a minute.

381
00:18:14,716 --> 00:18:16,740
>> So,
repeat is my element name.

382
00:18:16,741 --> 00:18:18,753
It's the tag I'm gonna
use inside my code.

383
00:18:18,754 --> 00:18:19,710
>> Exactly, yeah.
>> Cool.

384
00:18:19,711 --> 00:18:22,508
>> And if I wanted to change
attributes, there's actually

385
00:18:22,509 --> 00:18:25,373
attributes that I would use in
here on my class [CROSSTALK].

386
00:18:25,374 --> 00:18:27,657
So then I've declared
this count, and

387
00:18:27,658 --> 00:18:29,882
this is magically
just gonna appear.

388
00:18:29,883 --> 00:18:34,132
And the way it's gonna come in
is it's going to be an attribute

389
00:18:34,133 --> 00:18:36,900
on my tag helper in my Razor,
okay?

390
00:18:36,901 --> 00:18:41,185
So the same thing that we
had like, for instance,

391
00:18:41,186 --> 00:18:43,839
in my register I had asp-for,

392
00:18:43,840 --> 00:18:48,137
here I have Count, so
it's the same kinda thing.

393
00:18:48,138 --> 00:18:52,483
And then when it actually fires,
this process, async, gets fired,

394
00:18:52,484 --> 00:18:56,533
it's gonna be passed in both the
context, so we could read things

395
00:18:56,534 --> 00:19:00,011
about what's going on outside,
as well as the output.

396
00:19:00,012 --> 00:19:03,797
My output lets me
access the HTML, so

397
00:19:03,798 --> 00:19:08,080
I am accessing what's
my child content.

398
00:19:08,081 --> 00:19:14,270
And then I'm going to say append
that, and just repeating, right?

399
00:19:14,271 --> 00:19:14,830
>> Sure.

400
00:19:14,831 --> 00:19:17,176
>> All right, so now let's
go and put that to use.

401
00:19:17,177 --> 00:19:22,819
I'm going to go into my
Index view page [LAUGH].

402
00:19:22,820 --> 00:19:26,305
Old habits die hard.

403
00:19:26,306 --> 00:19:28,943
So now I'm gonna go
into my index, and

404
00:19:28,944 --> 00:19:30,761
I'm going to say repeat.

405
00:19:34,610 --> 00:19:38,160
Now something's wrong here,
because that should be purple.

406
00:19:39,290 --> 00:19:40,120
>> Yeah.

407
00:19:40,121 --> 00:19:42,710
>> So I've forgotten one
important thing, and

408
00:19:42,711 --> 00:19:44,012
you know what that is?

409
00:19:44,013 --> 00:19:46,790
I need to go into ViewImports.

410
00:19:46,791 --> 00:19:48,000
So that's-
>> That's right.

411
00:19:48,001 --> 00:19:50,845
>> That's the thing,
we need to register that, and

412
00:19:50,846 --> 00:19:52,620
that's a very important cue.

413
00:19:52,621 --> 00:19:55,631
If you start using a tag helper
and you're not seeing that

414
00:19:55,632 --> 00:19:58,527
IntelliSense, this is where
you need to turn that on.

415
00:19:58,528 --> 00:20:00,174
So let me actually repeat.

416
00:20:01,928 --> 00:20:05,185
And I'm also not seeing any
kinda IntelliSense in there.

417
00:20:05,186 --> 00:20:08,104
So let's go into this,
and let's try this.

418
00:20:08,105 --> 00:20:12,729
We'll do @addTagHelper *, and

419
00:20:12,730 --> 00:20:17,358
here I need to use
a assembly name.

420
00:20:17,359 --> 00:20:21,050
And so my assembly name
is WebApplication24.

421
00:20:24,140 --> 00:20:26,363
Which, by the way,
have you registered that yet?

422
00:20:26,364 --> 00:20:28,089
.com, .edu-
>> You know what?

423
00:20:28,090 --> 00:20:29,453
I'm sorry,
I've been sliding here.

424
00:20:29,454 --> 00:20:30,028
>> .biz.

425
00:20:30,029 --> 00:20:31,427
>> I'm paying attention
to the module.

426
00:20:31,428 --> 00:20:34,375
>> All right, so now,
did you see what happened there?

427
00:20:34,376 --> 00:20:35,355
It just turned purple.

428
00:20:35,356 --> 00:20:35,904
>> Nice.
>> And

429
00:20:35,905 --> 00:20:37,375
we see when we mouse over it.

430
00:20:37,376 --> 00:20:38,565
So now we know it's lit up.

431
00:20:38,566 --> 00:20:42,852
>> And so now I can go in,
and also, if I hit space,

432
00:20:42,853 --> 00:20:47,690
you see there, it's saying
I have a count property.

433
00:20:47,691 --> 00:20:52,115
>> So let's repeat,
what's a good number?

434
00:20:52,116 --> 00:20:53,690
>> Five.

435
00:20:53,691 --> 00:20:55,351
>> Five's, I'm gonna go six,

436
00:20:55,352 --> 00:20:57,749
cuz I'm just doing
one more today, okay.

437
00:20:57,750 --> 00:21:00,259
And so we'll do here a p tag.

438
00:21:03,569 --> 00:21:04,930
I will be repeated!!!

439
00:21:08,342 --> 00:21:09,982
Okay, exciting.

440
00:21:09,983 --> 00:21:13,233
So now, if we've done everything
right, we will see at the top of

441
00:21:13,234 --> 00:21:15,851
our Index view,
we'll see I will be repeated!!!

442
00:21:15,852 --> 00:21:19,301
And it will say six times.

443
00:21:19,302 --> 00:21:22,771
Fingers crossed, but I'm feeling
pretty good about it because

444
00:21:22,772 --> 00:21:24,257
that IntelliSense lit up.

445
00:21:24,258 --> 00:21:25,280
>> It lit up, there we go.

446
00:21:25,281 --> 00:21:25,835
>> There we go.

447
00:21:25,836 --> 00:21:28,340
So we'll see this here,
I will be repeated!!!

448
00:21:28,341 --> 00:21:33,656
And for extra fun, instead of
putting it around that tag,

449
00:21:33,657 --> 00:21:39,093
let's actually repeat my
carousel, my entire carousel.

450
00:21:39,094 --> 00:21:42,578
So I could do that by
collapsing this div, just to

451
00:21:42,579 --> 00:21:46,920
show that it's not just a simple
p tag we're able to repeat.

452
00:21:46,921 --> 00:21:48,933
This will work on anything,
right?

453
00:21:48,934 --> 00:21:52,528
>> That's a lot of-
>> So I find this to be,

454
00:21:52,529 --> 00:21:54,482
for a compelling,

455
00:21:54,483 --> 00:21:59,867
we want WebApplication24
to become a huge brand.

456
00:21:59,868 --> 00:22:03,550
And in order to do that, we
really need a lot of carousels.

457
00:22:03,551 --> 00:22:07,780
So here you see that
that worked, right?

458
00:22:07,781 --> 00:22:10,709
So that's, basically, we just,

459
00:22:10,710 --> 00:22:13,645
we looked at in
the box tag helpers.

460
00:22:13,646 --> 00:22:15,165
We wrote our own tag helper.

461
00:22:15,166 --> 00:22:15,969
>> Yep.

462
00:22:15,970 --> 00:22:18,639
>> It's helping or brand grow.

463
00:22:18,640 --> 00:22:19,860
>> Absolutely,
lots of carousels.

464
00:22:19,861 --> 00:22:20,897
>> And gain mindshare and
market share.

465
00:22:20,898 --> 00:22:24,251
Yes, so now what I wanna do
is actually jump over and

466
00:22:24,252 --> 00:22:28,385
look at some tag helpers other
people have written, because we

467
00:22:28,386 --> 00:22:32,610
saw writing our own tag helper
is literally as simple as, here-

468
00:22:32,611 --> 00:22:33,384
>> Implementing a method.

469
00:22:33,385 --> 00:22:36,200
>> [LAUGH] Implementing
a method, exactly.

470
00:22:36,201 --> 00:22:36,719
>> Yeah.

471
00:22:36,720 --> 00:22:38,591
>> And the other cool thing is,

472
00:22:38,592 --> 00:22:41,947
because of the way we pull
it into our application,

473
00:22:41,948 --> 00:22:46,257
is just adding addTagHelper, and
then this is an assembly name.

474
00:22:46,258 --> 00:22:50,391
Well, I can get assemblies off
a NuGet, I can get assemblies,

475
00:22:50,392 --> 00:22:53,590
I mean, this is not
difficult to redistribute.

476
00:22:53,591 --> 00:22:55,770
So I wanna show off just
a few of my favourites.

477
00:22:55,771 --> 00:23:00,700
And one is from Damien Edwards,
and it is the TagHelperPack.

478
00:23:00,701 --> 00:23:04,135
And this is something that he,
Damien Edwards is PM for

479
00:23:04,136 --> 00:23:05,540
ASP.NET team.

480
00:23:05,541 --> 00:23:09,168
And he actually built these tag
helpers as these were things he

481
00:23:09,169 --> 00:23:11,050
kinda wished were in the box, or

482
00:23:11,051 --> 00:23:14,331
thought, as he's building
applications he's like,

483
00:23:14,332 --> 00:23:16,807
here's some things I
use in my websites.

484
00:23:16,808 --> 00:23:18,380
>> Okay, possibly opinionated?

485
00:23:18,381 --> 00:23:19,410
>> Yeah, exactly.

486
00:23:19,411 --> 00:23:22,480
Some of these I would expect
to see actually ship in later

487
00:23:22,481 --> 00:23:25,660
versions of ASP.NET Core.

488
00:23:25,661 --> 00:23:27,788
So he's got example or

489
00:23:27,789 --> 00:23:31,484
information here on
how to install it.

490
00:23:31,485 --> 00:23:35,014
He's actually got it on MyGet,
which may move to NuGet,

491
00:23:35,015 --> 00:23:35,903
eventually.

492
00:23:35,904 --> 00:23:39,660
So I click through and this
is what I use to install it.

493
00:23:39,661 --> 00:23:41,580
This is his actual website, and

494
00:23:41,581 --> 00:23:44,580
it explains some of
the things he built.

495
00:23:44,581 --> 00:23:49,600
So I wanna start by showing a,
here he's got field and

496
00:23:49,601 --> 00:23:52,190
data annotation tag helpers.

497
00:23:52,191 --> 00:23:54,150
And this is kind of
a neat thing here.

498
00:23:54,151 --> 00:23:55,180
This starts to

499
00:23:56,790 --> 00:24:01,180
show an example of how this
can become kind of useful.

500
00:24:01,181 --> 00:24:07,150
So here, I've got
a customer class, and it is

501
00:24:08,600 --> 00:24:15,470
getting these label names off
of these attributes, right?

502
00:24:15,471 --> 00:24:19,466
So here it says,
my display name.

503
00:24:19,467 --> 00:24:21,571
It could say First name, but

504
00:24:21,572 --> 00:24:25,979
I'm gonna change this to say
Customer first name, right?

505
00:24:25,980 --> 00:24:29,890
And then I'm gonna run this.

506
00:24:29,891 --> 00:24:35,385
And so what's gonna happen is
this tag helper's job is it's

507
00:24:35,386 --> 00:24:40,786
gonna actually pull those
labels off of these attributes.

508
00:24:40,787 --> 00:24:45,045
So if I look down here,
we'll see there,

509
00:24:45,046 --> 00:24:48,860
it says Customer first name,
okay?

510
00:24:48,861 --> 00:24:51,717
So this is a way of
customizing a label,

511
00:24:51,718 --> 00:24:53,804
how the label is generated.

512
00:24:53,805 --> 00:24:57,775
And in this case, it's actually
pulling it off of the.

513
00:24:57,776 --> 00:24:58,512
Display attribute.

514
00:24:58,513 --> 00:25:01,324
>> Display attribute, exactly
and these display attributes

515
00:25:01,325 --> 00:25:03,851
are handy for a lot of other
things like validation and

516
00:25:03,852 --> 00:25:05,450
all that kind of stuff.

517
00:25:05,451 --> 00:25:07,080
So he's got several others.

518
00:25:07,081 --> 00:25:09,040
One other thing that
I really love and

519
00:25:09,041 --> 00:25:13,240
I use in a lot of places
is his partial tag helper.

520
00:25:13,241 --> 00:25:16,290
And this is something where
partials are a really

521
00:25:16,291 --> 00:25:21,170
handy way of abstracting code.

522
00:25:21,171 --> 00:25:23,930
So if I've got a bunch
of code in one view, and

523
00:25:23,931 --> 00:25:27,080
I want to kind of move it to
another file, I can do that and

524
00:25:27,081 --> 00:25:28,920
I can reference it as a partial.

525
00:25:28,921 --> 00:25:33,840
So he makes it very easy to just
say, there's another syntax for

526
00:25:33,841 --> 00:25:34,860
using it that's right.

527
00:25:34,861 --> 00:25:37,356
You can say at partial and
I fill in some stuff and

528
00:25:37,357 --> 00:25:39,292
it's just like, it's not pretty,

529
00:25:39,293 --> 00:25:41,804
it's not [LAUGH] it's not
the code I wanna like.

530
00:25:41,805 --> 00:25:47,040
>> It puts you into C# mode
instead of HTML coding mode.

531
00:25:47,041 --> 00:25:50,160
>> Exactly and then one more
kind of more advanced one that

532
00:25:50,161 --> 00:25:53,600
he's done is he's actually
got a mark down tag helper.

533
00:25:53,601 --> 00:25:57,460
And so here you go and then you
can write things in mark down

534
00:25:57,461 --> 00:26:01,470
and this mark down tag helper
complies it into HTML.

535
00:26:01,471 --> 00:26:03,710
So all of these in
order to use these

536
00:26:05,140 --> 00:26:09,150
he's got a handy sample
project available.

537
00:26:09,151 --> 00:26:12,980
And if I go in and look at what
is the source code for these,

538
00:26:12,981 --> 00:26:17,710
you'll see on my home
view he goes through and

539
00:26:17,711 --> 00:26:19,230
actually makes use of all these.

540
00:26:20,890 --> 00:26:25,520
So you know showing things
like how to set these up.

541
00:26:25,521 --> 00:26:34,040
Yeah exactly, and you'll notice
again it's got that purple.

542
00:26:34,041 --> 00:26:36,870
Lights up and
shows how those work.

543
00:26:36,871 --> 00:26:38,280
So that's handy.

544
00:26:38,281 --> 00:26:42,150
Another one I want to show
is a group of these from

545
00:26:42,151 --> 00:26:45,220
David Paquette and David
Paquette has built these really

546
00:26:45,221 --> 00:26:49,490
cool tag helpers to do
some other neat stuff.

547
00:26:49,491 --> 00:26:53,020
So if we look at these,

548
00:26:53,021 --> 00:26:57,650
he's got to take helpers for
things like bootstrap.

549
00:26:57,651 --> 00:27:01,670
And so bootstrap is nice but
there's some things where I've

550
00:27:01,671 --> 00:27:04,920
got to go and look up what
are these different attributes.

551
00:27:04,921 --> 00:27:05,470
>> Yeah.

552
00:27:05,471 --> 00:27:10,040
>> It's not auto completed and
it gets me out of my zone.

553
00:27:11,270 --> 00:27:14,650
>> If I'm not a whiz with
bootstrap, if I'm not

554
00:27:14,651 --> 00:27:18,060
using that on a daily basis,
I might not know all the CSS.

555
00:27:18,061 --> 00:27:22,140
>> Exactly, yep, so
here he's got a website.

556
00:27:22,141 --> 00:27:25,150
Both of these have
you can click off and

557
00:27:25,151 --> 00:27:28,750
they've got example websites
that show how to set them up.

558
00:27:28,751 --> 00:27:30,880
So here's an example of
something like an alert

559
00:27:30,881 --> 00:27:32,370
tag helper.

560
00:27:32,371 --> 00:27:35,816
So here, instead of going in and
writing div class

561
00:27:35,817 --> 00:27:40,164
equals blah blah blah, and look
on the getbootstrap website,

562
00:27:40,165 --> 00:27:43,706
l can just do alert and
then put the message name in.

563
00:27:43,707 --> 00:27:47,294
And then when l click on that,
he's actually got,

564
00:27:47,295 --> 00:27:50,381
here is the alert that
it shows there, and so

565
00:27:50,382 --> 00:27:54,653
this shows the different kind
of alerts that are available.

566
00:27:54,654 --> 00:27:57,583
Another one is a modal,
so modal one is not,

567
00:27:57,584 --> 00:28:00,603
you know another one
actually progress bar.

568
00:28:00,604 --> 00:28:03,547
Progress bars take a lot
of markup usually,

569
00:28:03,548 --> 00:28:04,190
[LAUGH]
>> Yeah.

570
00:28:04,191 --> 00:28:06,310
>> You have to nest all
this different stuff and

571
00:28:06,311 --> 00:28:08,410
so here he's kind of
generating that for you.

572
00:28:09,430 --> 00:28:13,660
One last one I want to
show was the modal.

573
00:28:14,800 --> 00:28:16,440
So there it is,
here's the modal,

574
00:28:16,441 --> 00:28:18,920
and here's one where you can
actually see something that's

575
00:28:18,921 --> 00:28:20,660
in action, you can-
>> So

576
00:28:20,661 --> 00:28:23,200
it's got a modal tag with
the body and the title?

577
00:28:23,201 --> 00:28:24,670
>> Yep.
>> That's easy.

578
00:28:24,671 --> 00:28:29,030
>> Yeah, so in other to do
that this is simplifying it.

579
00:28:29,031 --> 00:28:30,660
And again I could go and
do this,

580
00:28:30,661 --> 00:28:35,796
if I go to getbootstrap.com,

581
00:28:35,797 --> 00:28:41,110
but the two things this kind
of gives me that are handy,

582
00:28:41,111 --> 00:28:44,170
I'm gonna show the free
version of this.

583
00:28:46,010 --> 00:28:51,110
The things that this gives
me is, one, it's a little

584
00:28:51,111 --> 00:28:53,780
bit less markup and two,
I'll get that autocompleted.

585
00:28:53,781 --> 00:28:56,380
So I can go through and
take advantage of that.

586
00:28:56,381 --> 00:28:57,000
>> Absolutely,

587
00:28:57,001 --> 00:28:59,540
I mean the intellisense that's
embedded there in Visual Studio

588
00:28:59,541 --> 00:29:00,800
with that makes it so

589
00:29:00,801 --> 00:29:04,915
easy to find these features and
get help when you need it.

590
00:29:04,916 --> 00:29:05,870
>> Yeah, exactly.

591
00:29:05,871 --> 00:29:07,320
So here's the markup.

592
00:29:07,321 --> 00:29:11,502
You can just see here's the kind
of mark up I would have needed

593
00:29:11,503 --> 00:29:15,520
for those progress bars versus
if we look at these progress

594
00:29:15,521 --> 00:29:17,376
bars, it's a one liner.

595
00:29:17,377 --> 00:29:19,440
>> Gosh yes.
>> So, and it's nice,

596
00:29:19,441 --> 00:29:22,390
it's easy to buy into and
all that kind of stuff.

597
00:29:22,391 --> 00:29:25,570
Now, what's cool with these is

598
00:29:25,571 --> 00:29:28,490
if I want to learn how to
write my own tag helpers.

599
00:29:28,491 --> 00:29:31,120
Or if I want to write a tag
helper similar to something

600
00:29:31,121 --> 00:29:32,540
someone else has
already written.

601
00:29:32,541 --> 00:29:34,630
>> Sure maybe I want to
extend their tag helper.

602
00:29:34,631 --> 00:29:37,240
>> Exactly so I can go in and
look at either of these.

603
00:29:37,241 --> 00:29:41,412
So for instance if I look
at David Paquette's and

604
00:29:41,413 --> 00:29:44,361
we say well what is
he doing with for

605
00:29:44,362 --> 00:29:48,963
instance this, like this
modal or the progress bar.

606
00:29:48,964 --> 00:29:50,590
How is he generating that?

607
00:29:50,591 --> 00:29:52,860
So if I look at the progress
bar tag helper.

608
00:29:54,360 --> 00:29:58,900
I can see, here's what he's
doing how that's hooked up.

609
00:29:58,901 --> 00:30:00,480
So something I mentioned but

610
00:30:00,481 --> 00:30:05,290
didn't begin to earlier is
he's actually extending a div.

611
00:30:05,291 --> 00:30:10,690
So here he's saying this is
called a ProgressBarTagHelper,

612
00:30:10,691 --> 00:30:13,960
but it binds to a div,
it modifies a div.

613
00:30:13,961 --> 00:30:18,710
And so here's how he does that
he says HtmlTargetElement so

614
00:30:18,711 --> 00:30:19,980
this is going to light up for

615
00:30:19,981 --> 00:30:24,250
any HtmlTargetElement that
uses these attributes.

616
00:30:25,300 --> 00:30:31,500
And then the actual thing where
he, let me zoom back out.

617
00:30:31,501 --> 00:30:36,600
The actual implementation
is that process async, and

618
00:30:36,601 --> 00:30:40,110
it's actually not that much
code in order to do that.

619
00:30:40,111 --> 00:30:44,320
>> And he's just writing up
that div that's sitting there.

620
00:30:44,321 --> 00:30:45,200
>> Exactly.

621
00:30:45,201 --> 00:30:48,629
>> So it's just that's how
he's writing this out.

622
00:30:48,630 --> 00:30:52,423
And I only showed off his
bootstrap once, there are some

623
00:30:52,424 --> 00:30:56,380
others that is got available
here is got for authorization

624
00:30:56,381 --> 00:31:00,122
for generating test data
he's also got markdown one.

625
00:31:00,123 --> 00:31:02,910
So that's handy and

626
00:31:02,911 --> 00:31:07,985
then if we look at the ones that
Damian's done, for instance,

627
00:31:07,986 --> 00:31:11,415
it's surprisingly a little
code most of the time.

628
00:31:11,416 --> 00:31:14,000
[LAUGH] So if I look at that
partial and this is doing

629
00:31:14,001 --> 00:31:16,620
something relatively I
would think complex,

630
00:31:16,621 --> 00:31:19,750
it's including a partial.

631
00:31:19,751 --> 00:31:21,650
If we look at
the actual code for

632
00:31:21,651 --> 00:31:25,190
that, there's like almost
nothing here [LAUGH].

633
00:31:25,191 --> 00:31:28,103
So, it's this process
async like we looked at

634
00:31:28,104 --> 00:31:30,687
before and
this is all it's actually doing.

635
00:31:30,688 --> 00:31:33,387
It's just modifying the output
to call in that partial.

636
00:31:33,388 --> 00:31:35,260
>> It's calling the HTML
helper directly.

637
00:31:35,261 --> 00:31:39,166
>> Yeah, so you know that's
an example of something

638
00:31:39,167 --> 00:31:43,500
where l could write,
it's like yeah, it makes sense.

639
00:31:43,501 --> 00:31:44,010
>> Absolutely.

640
00:31:44,011 --> 00:31:47,160
>> It's like, he's just calling
directly into the thing.

641
00:31:47,161 --> 00:31:50,970
So that's for the partial.

642
00:31:50,971 --> 00:31:56,100
If we look at his mark down one,
and that's again,

643
00:31:56,101 --> 00:31:58,520
you think well that's
got to be complex.

644
00:31:58,521 --> 00:32:03,870
Well he's using another
markdown helper to do this and

645
00:32:03,871 --> 00:32:07,250
then he is actually just
calling ProcessAsync.

646
00:32:07,251 --> 00:32:10,500
So, he is using Markdig
here which is a popular

647
00:32:10,501 --> 00:32:14,240
NuGet package that does
markdown processing, but

648
00:32:14,241 --> 00:32:17,610
that's really all there
is to it on this.

649
00:32:17,611 --> 00:32:20,250
So, kind of wrapping up.

650
00:32:20,251 --> 00:32:24,220
What tag we looked at,
what tag helpers are.

651
00:32:24,221 --> 00:32:25,040
>> Sure.

652
00:32:25,041 --> 00:32:28,260
>> We showed when I do File,
New Project I've already got

653
00:32:28,261 --> 00:32:32,190
some tag helpers that are in my
File, New Project application.

654
00:32:32,191 --> 00:32:35,009
If I never wanna know anything
more about it than that,

655
00:32:35,010 --> 00:32:37,584
they're making my life
easier because I can go and

656
00:32:37,585 --> 00:32:39,010
write simpler and easier.

657
00:32:39,011 --> 00:32:43,240
Razor, I can take advantage
of things like forms and

658
00:32:43,241 --> 00:32:46,110
validation and all that and
pretty simple to wire things up.

659
00:32:46,111 --> 00:32:50,290
If I wanna write my own, we saw
that thing where I went in and

660
00:32:50,291 --> 00:32:54,060
I wrote my own and if we look at
what the code was involved for

661
00:32:54,061 --> 00:32:55,215
repeat tag helper.

662
00:32:55,216 --> 00:32:58,985
Like that's it,
it's like do process async and

663
00:32:58,986 --> 00:33:00,415
I modify my output.

664
00:33:00,416 --> 00:33:02,575
>> Yeah.
>> And then we look finally,

665
00:33:02,576 --> 00:33:05,185
and we remembered and I'll just
call it out again because this

666
00:33:05,186 --> 00:33:08,965
is something I forget and
you may forget yourself.

667
00:33:08,966 --> 00:33:11,175
You've got to call this
addTagHelper in your view

668
00:33:11,176 --> 00:33:11,885
imports.

669
00:33:11,886 --> 00:33:12,405
>> Right.
>> You

670
00:33:12,406 --> 00:33:14,890
could call it in one
individual view.

671
00:33:14,891 --> 00:33:18,980
I can put it just at, I can just
import it for my index view or

672
00:33:18,981 --> 00:33:21,090
whatever, or
I can do view import here and

673
00:33:21,091 --> 00:33:22,270
import it everywhere.

674
00:33:22,271 --> 00:33:23,650
>> That's a global import.

675
00:33:23,651 --> 00:33:24,870
>> Global import, exactly.

676
00:33:24,871 --> 00:33:27,050
>> Okay.
>> And then finally we looked at

677
00:33:27,051 --> 00:33:31,100
how to make use of other
people's tag helpers.

678
00:33:31,101 --> 00:33:34,960
And they've both made these
available and then for something

679
00:33:34,961 --> 00:33:38,260
like this they'll show examples
of, here's how to use it.

680
00:33:38,261 --> 00:33:40,090
You can install the package.

681
00:33:40,091 --> 00:33:42,360
You call add tag helper and
then go to town.

682
00:33:42,361 --> 00:33:44,150
>> And you're off and
running, cool.

683
00:33:44,151 --> 00:33:46,720
>> And so the one final thing I
want to remind people of is that

684
00:33:46,721 --> 00:33:49,395
there are some great
documentation about this on

685
00:33:49,396 --> 00:33:53,430
docs.ASP.NET or excuse me,
docs.microsoft.com.

686
00:33:53,431 --> 00:33:57,520
And it used to be on ASP.NET.

687
00:33:57,521 --> 00:34:00,700
So this explains what they are,
tells you how to write your own.

688
00:34:02,520 --> 00:34:04,620
Shows how to take
advantage of them.

689
00:34:04,621 --> 00:34:06,390
>> It will keep you up
to date in the future as

690
00:34:06,391 --> 00:34:07,670
the technology evolves.

691
00:34:07,671 --> 00:34:08,340
>> Exactly.

692
00:34:08,341 --> 00:34:10,060
>> Cool.
>> All right.

693
00:34:10,061 --> 00:34:11,780
>> Well thanks a lot and
I hope you stick around for

694
00:34:11,781 --> 00:34:12,480
our next module.

