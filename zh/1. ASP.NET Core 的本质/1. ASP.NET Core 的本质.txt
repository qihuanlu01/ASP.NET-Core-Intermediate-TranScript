嗨，我是 Maria Naggaga
我是 Jeff Fritz
我们回到了 ASP.NET Core 2.0 的中级课程
在初学者课程中，我们讨论了几件事
首先我们对ASP.NET Core进行了介绍
我们接触了 .NET CLI ，构建了第一个应用程序，我们创建了 Web 应用程序并且看到了 Razor 页面
-是的 -嗯呐，这些都接触过了
我们也创建了第一个入门应用程序
我们稍微介绍了日志记录
在今天的中级阶段，我们将进一步深入
在完成所有高级别的东西后，下一步会怎么进行？
拉回 layer （一款口碑极佳的 web 弹层组件）
我们会稍微调整一些这些东西
只接触一点点，我们在 ASP .NET Core 上有更多的东西要看，比如我们有很多内部的新项目新文件
多了我就不再讲了，好嘛？
我们将更详细地研究标签助手
在初学者课程中我们看过标签助手，但我并没有真正解释你还能用它们做些什么
当时只是说，这些是标签助手，它们很好用，而且会改变不同的颜色
现在我们要看看身份验证以及 Spa
今天要学到很多东西了
看看侧面显示的轮廓和模块，是的，让我们开始吧
听起来不错
所以我要开始使用一个全新的应用程序
这样我们就可以在同一个地方设置使用环境
我称之为 MyMVA
我将创建一个将身份验证设置为单个用户帐户的 Web 应用程序
这么做是为什么呢？
我们这样做这样够让用户登录到应用程序进行身份验证，并且我们可以为这些用户设置授权功能，以便能够访问应用程序的不同部分
这对我们来说有什么作用，以及为什么在课程中去研究这一部分的原因是，它为数据库交互设置了一些内容，我希望能够接触这些配置，以便在以后再谈到它的内容
好的，你点一下 Okay 吧，我们看看盒子里会出现什么
是的，我们要看一下，然后稍微了解为什么其中一些有用呢？
我已经设置了个人用户帐户，让我们继续创建它
我的项目已创建
它会还原包
我们来看看解决方案资源管理器
转到 Startup
我们都知道，放便 Web 应用程序能够与我们网站的访问者进行交互和提供网页配置的方式
现在往页面下滚动就可以看到这里有一个简单的 start up ，我们将捕获应用程序的配置
我们过会儿再来查看该配置,我想继续这个介绍配置服务的快速教程,在那里我们将设置所有可用于我的其他应用程序的服务,好嘛？
不同的控制器或页面甚至标签助手这些跨领域的服务，都可以用来与应用程序构建的内容进行交互
这里的最后一部分是一个配置方法，及接收参数的应用程序构建器，然后是托管环境
这些配置部分将被称为 HTTP 管道
我们现在来了解一下管道，但我想从这里查看配置服务方法开始，真正深入了解这里发生了什么
现在你可能听说过依赖注入一词，对吧？
是的，我听说过
就是一些可以被传递到其他位置的，配置在我们的应用程序中的依赖项
其他组件，其他功能模块，需要这些功能才能执行其任务
例如，在第29行，我们为应用程序数据库上下文添加数据库上下文，并将其配置为使用 SQL Server
在我们的配置中使用 SQL server 数据库来获取连接字符串
不错，这表示可以在 ASP.NET 任何类的构造函数中引用 ApplicationDbContext ，它会自动传递给我
速览一下这部分内容，如果要我看的话我会考虑看我的注册页面<-
我的注册页面接收所有这些不同的东西，以便注册一个新帐户，包括UserManager，SignInManager，记录器，甚至发送电子邮件的信息
这些东西指的是抽象类或接口
那些东西会自动注入给我
并且它保存了一份这样的副本，以便他可以处理注册过程
那么它将这个副本保存在哪里？
所以它将这些私有变量保存在第17到20行的顶部
所以我只为该页面正在运行的实例提供了本地副本
所以我可以注册新人，我可以访问他们的用户记录
我可以访问登录管理器并根据需要为他们创建密码，甚至适当地记录信息或发送电子邮件给那些人说，嘿，我在这个网站上为你创建了一个新帐户
这就是依赖注入给你的东西
你可以在这里看到这些其他的add语句
服务增加了身份
这会添加我们在注册页面上看到的功能，特别是用户管理器和登录管理器
这些来自我们的安全身份功能
当我们看到身份验证和授权时，我们今天晚些时候会看到有关身份的更多信息
所以这里的身份功能配置了它，它说我们将在应用程序数据库联系人中存储有关我们用户的信息
我们之前刚刚定义的那个使用SQL服务器的数据库联系人
接下来，添加MVC，这将配置依赖注入并在MVC框架内配置这些功能，以便它们可以注入其他MVC对象
即使这是一个剃刀页面应用程序
它仍然建立在MVC之上，因此它只是让我们能够利用
是的，一点没错
所以我们正在利用相同的MVC功能
同样的Razor模板引擎，同样的标签助手功能
这些都可供我们使用，我们将能够指定和使用具有相同MVC功能的那些
我们仍然可以添加控制器和视图，这些模板将通过我们的应用程序提供给我们
下一个语句，第37行的AddRazorPagesOptions，这将配置我们需要用于授权的页面和我们想要确保人们实际登录的页面能够访问
因此，您希望能够在“管理”页面上只登录人员管理他们的帐户，并且只有登录的人员才能注销，对吧？
如果你没有登录并且你正在退出，你会遇到一个奇怪的循环
但是，作为开发人员编写自己的应用程序，您可以扩展的真正有趣的事情是能够使用依赖注入功能注册您自己的服务
这一行45，services.AddSingleton，这是我们开始注册自己的能力的地方
所以我们之前看到Register页面在这里收到了EmailSender
EmailSender在此定义为引用具体的EmailSender对象
现在，如果我们只是快速浏览一下，您可以看到EmailSender只是一个实现IEmailSender接口的类，作为一种方法，SendEmailAsync
并且出于默认代码的目的，我只是说我已成功完成该测试
如果我们想在这里开发一个真正的电子邮件发件人，我们会写一些实际上收到我们想要发送的电子邮件正文的内容，该邮件的主题，适当地格式化邮件并使用我们的任何电子邮件服务或电子邮件服务器发送出去我们可以使用
您的里程可能因您选择的那个而异
我们在Azure上为您提供了许多服务供您选择，或者您可能在内部网络上有可用的电子邮件服务器，您也可以使用
那么Azure上的一些人们可以开始利用它们？
人们喜欢使用的一种非常受欢迎的叫做Sendgrid
所以在Sendgrid有各种各样的东西，以确保你不发送垃圾邮件，以防止你发送垃圾邮件过滤器，如果你发送合法的电子邮件
您不希望最终进入人们的垃圾邮件文件夹
有很多东西可以帮助你管理它
有一个很好的控制台，所以你可以看到你发送的那些电子邮件的状态
所以在Azure上查看SendGrid
让我回到创业公司
现在，这个AddSingleton正在配置IEmailSender接口
当请求电子邮件发件人界面时，我们将提供与之匹配并实现它的电子邮件发件人类的具体实现
现在，通过在这里使用AddSingleton术语，它表示我们将只创建一个电子邮件发件人类
并且在这个应用程序的整个生命中只有一个
- 这是一个单身人士 - 它是唯一使用的人
现在，这可能适用于您只需要其中一个管理整个应用程序的类
但是还有其他类，比如我们的数据库上下文，您希望每个类只能用于每个请求
因此，当我们网站的访问者通过时，他们获得相同的数据库上下文，相同的数据库连接字符串，用于他们在整个请求中执行的所有操作
我们可以使用命令AddScope定义这些类型的服务
现在，整个请求中都有一个范围对象，如果您通过标记帮助程序，通过视图组件，通过剃刀页面，通过控制器请求，您将获得相同的对象
您将始终获得在创建该请求中的第一个对象时创建的相同实例
所以作用域是你定义一个对象的另一种方式，即要处理和发送的对象，我要显示的最后一个是瞬态的
因此，如果您指定某些内容是瞬态的，这意味着每次这些页面或类中的一个请求该类型的接口或抽象类时，都会创建一个新实例
因此，对于像我们要建立与SendGrid之类的服务的连接的电子邮件发件人这样的事情没有意义，我们不希望每次都重新创建该连接
每次 
内存使用情况，处理器，创建一次，然后根据需要同步使用它，就像你在界面中看到的一样
因此，瞬态对象可能类似于存储库模式或您可能想要使用的其他一些通信事物，因此您总是会遇到新的副本
所以这是短暂的单身状态，好吗？
所以这里有一点关于依赖注入如何在配置服务中工作，所有这些事情都发生在这个方法里面
现在，我实际上已经看到了一些人，他们会把这个方法的内容拿出来，然后他们会把它移到另一个类中，这样他们就可以将所有这些都放在一边的额外文件中，我需要在这里维护并意外地破坏该应用程序中的某些内容或其他配置方法
那么他们将配置服务拿出并投入到自己的服务中？
只要拿出它的内容，但是把那个方法留在那里，他们只会说，这个类点配置服务，它就在其他地方
你可能会意外地改变你不想要的东西
现在让我们来看看这里的HTTP管道
HTTP管道，这是我们将要处理我们的请求的方式
ASP.NET将查看每个请求的顺序
处理它然后将其返回给请求的浏览器或客户端，无论可能是什么
所以，我们在这里有一个if语句
如果我们处于某些优惠环境中，让我们检查一下我们是否处于开发模式
我们不会执行这些东西，因为这将测试环境
现在，看看我们的配置中如何处理环境，但通常当您在Visual Studio中运行时，它会自动为您配置为开发环境
所以我想在出现错误时看到我的开发人员异常页面，我希望能够看到堆栈跟踪，一切都是错误的
但这不是我想要的普通访客
我们希望他们看到一个更好的错误页面，这就是为什么我们在这里使用异常处理程序路由到该错误页面如果处理报告时出现问题
那么这将是404还是500？
那些会是例外吗？
它应该是500
404将转到Web服务器将处理的东西，但是
如果我们得到500级错误，我们将进入这个位置
在错误页面中，您可以在我们的页面内部看到
就在这儿
它会传达一个好消息
好的，处理您的请求时出错了
发生了错误，是的
接下来的事情是使用静态文件
因此，当您在应用程序中拥有所需的额外元素时，它们将存在于wwwroot下
我们看到我相信最后一道课程
是的我们做了
在所有这些事情中，你实际上需要告诉ASP.net如何为它们服务，否则，Castor Web服务器不知道该怎么做，对吧？
好吧，我们需要把它放在下一个因为如果有人要求像CSS文件这样的东西我们想要停在那里
而不是进入其他一些事情
我们不想评估MVC功能或尝试检查安全性
去服务那个CSS文件然后，我们不需要继续处理那个点
但是，如果您不是要求CSS图像，JavaScript或静态内容，我们将继续使用此UseAuthentication语句
这就是我们要检查的内容
如果当前页面或当前请求需要身份验证
我们将验证它然后适当地处理它
这里的最后一件事是使用MVC
我们将配置MVC功能，以便它们是我们可以浏览的端点
它不是映射我们的路线吗？
因此，如果我们使用带有操作的控制器，这就是映射路由
不是。在这种情况下，我们实际上使用页面和页面被路由到页面文件夹内的任何内容减去CSHTML扩展
这是你的位置，你在文件夹中的位置
是的，文件夹中的物理位置就是我们所服务的
但是我们仍然可以将这些操作作为路径位置来执行
好的，所以重点是你可以在页面集中添加控制器吗？
你可以添加它
通过这种方式，如果您使用JavaScript框架来执行某些间谍应用程序工作，您可以执行API控制器，我们今天稍后会看到一些
现在，重要的是这些事情的出现顺序
是的，所以我提到静态文件出现在身份验证之前，因为我们不希望在向他们发送CSS文件之前对人员进行身份验证
是的，如果我们不包含其中的一些内容，如果我们不包含静态文件，它就不会实际处理并将这些静态文件返回给访问者
所以这些都是非常重要的事情
我实际上会把它改成我的应用程序，我想告诉你会发生什么
我们删除了上一课程中的静态文件吗？
不，我们没有
让我们看看发生了什么
当我们把它拉出来时，让我们导航到我们的应用程序，看看会发生什么
看起来它可能不是最漂亮的页面
我们要删除
所有的CSS
我们要删除所有的JavaScript
而不是获得那个很好的Bootstrap框架启用网站，它不会看起来漂亮
所以我从Visual Studio进行了Chrome调试
这是新的，对吗？
这是新的，所以使用Visual Studio，您现在可以从Visual Studio在Chrome浏览器中调试JavaScript
现在看看这个吧？
看起来很糟糕
我在看它，那是什么？
我知道，这很难看，那太可怕了
但重点是切换导航，这就是直线条
是的，那就是我们习惯在Bootstrap环境中看到的左侧汉堡包导航，但我们没有提供任何CSS
没有我们的JavaScript，我们只得到这个简单的HTML网站
现在，对于我母亲的婆婆在2002年的浏览器可能没问题，那时非典型的人没有更新的功能
这不是那么好
这就是我们需要在HTTP管道中包含这些部分的原因
并按特定顺序
按正确的顺序
因此，如果您实际上已获取服务状态文件并将其置于身份验证之下
是的，我们试试吧
同样的事情可能会发生或什么，给你一个错误
好吧，我们可能不会收到错误
让我们一直向下移动到底部
好的，就是这样
所以现在我们刚刚改变了一下订单
我们要重新运行，没有别的变化
实际上，它有效
有效
因为我们要求的那些页面都在那里生活
那些CSS和JavaScript引用与我们配置的任何页面都没有名称冲突
所以我们在这里躲过了一劫
但是，如果他们确实有相似的名字，它可能会发生碰撞，你可能无法收回它
因此，它不能保证它能够正常运行
我们碰巧有一些适合的名字
因为当你看到我们引用的东西时，我们在lib下有很多东西
而且我们没有一个lib页面，我们可能会混淆它，对吧？
对于JS图像和CSS也是如此，我们没有可能会让事情混淆的页面所以让我停下来
如果您的配置方法在这里，那么这就是您内部的事情的顺序
现在，如果您正在使用身份验证执行其他功能，并且您希望与其他某些提供商进行交互，那么您将在此方法中看到它们的配置
这再次暗示了我们在本课程中的另一个模块
所以这有点关于那里发生了什么
我一直在提到应用程序配置，我展示了一些关于开发环境的内容
我们实际上谈论配置我们的应用程序
所以我们有这个方法，构造方法
它正在接收IConfiguration，并在我们的本地属性Configuration中存储它
这样我以后可以访问该配置以获取类似我的数据库ConnectionString的内容
现在这个请求正在从应用程序设置中获取该数据库ConnectionString
这是我的默认数据库连接字符串
让我在那里放一个角色，这样我们就能看到它
即使这样，它仍然在这里推出一行，因为我们在这里放下了这个独特的GUID
我的数据库名称的全局通用标识符
我们想要一个唯一的数据库名称，仅用于创建此模板数据库
它正在侦听本地数据库，即本地MySQL数据库
这样我就可以编写并使用该配置了
现在在Startup里面说getConnectionString，这是一个帮助方法，它将在Configuration中查找ConnectionStrings对象
然后在Connection字符串中查找DefaultConnection对象
所以DefaultConnection，它将从我的JSON中获取这个值并提供它
所有这些都默认配置在程序CS内部
我们有CreateDefaultBuilder，UseStartup和Build
DefaultDuilder将抓取该应用程序设置之类的内容，将其值加载到配置中并开始阅读它
它还会加载环境变量
现在，对于很长一段时间的.NET人来说，开始将环境变量读入配置听起来有点怪异吧？
他们之前在哪里？
确切地说，如果我们之前必须读取环境变量，我们实际上必须编写一些自定义代码来访问环境变量
并找出我想要的值在哪里并适当地注入它们
所以我们所做的就是我们已经把它作为框架的一部分，以便它内置，并且它是分层的，是你配置的最后一件事
所以你可以做的是你可以通过添加一个具有相同名称的环境变量来实际更改应用程序设置中的一些设置
您可以添加Logging环境变量，但Logging实际上具有此层次结构
我们通过用双下划线分隔来覆盖该层次结构中的项目
所以听起来有点怪异
让我向您展示环境变量如何出现在我们的页面内
我要去主页，然后我们将看看开始注入其他一些东西
我将在这里用@inject目录注入我们的配置
而我要注入的是Microsoft.Extensions.Configuration.IConfiguration
我将其命名为Configuration
所以我已经完成了我的配置，我将要深入到底部，让我们清楚这个页面
是的，我们这样做
这里不需要任何东西
让我们清楚这一点，我要提出我机器的主机名
所以我可以说这是我的机器名
我会说@configuration
每台Windows机器实际上都会创建一个名为computername的环境变量，因此我将引用它
现在，通过使用配置，然后使用索引器，计算机名称，它将在我的配置中找到该值并将其放在此处
那么让我们看看运行时会发生什么
所以它应该说杰夫的真棒计算机202049，或类似的东西
我认为这是杰夫的瑜伽或类似的东西
你去吧
这是我的机器JEFFS-YOGA，好吗？
现在这很棒，这是我的机器名称
它是一个存在的环境变量，在我的机器上是原生的
我注射了注射液，然后把它放在我的页面上
那没有价值
但是可能有价值的是，如果我有一个应用程序设置在这里，就像MyTwitterKey，也许它是一个ID，让你进入Twitter
它是TwitterSecretKey，对吧？
所以在我的机器中，当我构建这个时，我可以参考并使用它，无论是我的页面还是我的启动，如果我来到这里并且我将访问相同的值，MyTwitterKey
如果我把它放在那里，重启应用程序
它可能应该有你的Twitter
它应该具有相同的值
它就是TwitterSecretKey
但是当我进入我的生产环境时，我不希望我在开发中编写的相同值
我实际上想用环境变量覆盖它
因此，在Visual Studio中，您可以管理您使用的环境变量 -  >>那么您是如何实现的？
在构建时
谢谢你，让我们退后一步
所以如果我去Project，我的项目名称是属性
如果我进入，我认为是
不，它可能是调试吗？
是的，Debug，所以我们这里有一个项目，它表示环境变量
我们在这里定义了这个初始变量
ASPNETCORE_ENVIRONMENT，它说开发
那是我们为这台机器定义的环境名称，好吗？
所以我们已经指示这是一个开发环境
所以在我说的Startup中的那些东西就是这个开发，这将被执行
如果您未预先设置此变量，则默认为生产
所以我要做的就是通过设置另一个环境变量来覆盖MyTwitterKey，我将调用这个ProductionKey
所以现在，如果这是在不同的环境中，那么这个价值现在就会占据上风
那一个将取代应用程序设置JSON中的内容
我们会在一瞬间看到这一点
这似乎是一种更安全的方式
它是，但甚至有一种更安全的方式来做到这一点
那么，ProductionKey就出现了
但如果没有设置环境变量，我仍然会得到旧的TwitterKey
现在，让我再停一次，并且
我想表明我们认为人们应该开始的最后方式
看着这样做
如果我们看看appsettings，对吧？
实际上，我的密钥设置是纯文本
你知道有多少人将这些提交到源代码控制，共享源代码控制中，并且它可以在那里使用吗？
是的，我已经做到了
我做到了，对不起
我们希望人们默认更安全
因此，我们可以使用称为用户秘密的东西，而不是把它放在那里
现在，用户秘密是ASP.NET核心上提供的一项功能
这是一个额外的功能，我可以通过下载并选择Manage User Secrets来访问Visual Studio内部
当我右键单击我的项目时
当我选择它时，你会看到我在这里得到了一个名为secrets.json的新文件
当我把鼠标移过来，检查出来
它出现了，它给了我一个工具提示，显示它在C：/ users / jeff / appdata / roaming /下，让我再回过头来看看，microsoft / userssecrets
然后是我的应用程序名称，后跟GUID，然后是secrets.json
所以这不是一个加密文件，因为它是一个不在源代码控制中的文件
现在意味着什么，我可以在我的应用程序设置中采用相同的值，我将它粘贴在这里
有我的TwitterSecretKey
我会改变这个 - 不应该使用
我不应该得到这个价值
相反，我想让这个SecretKey出来
现在，这是最好的部分
默认情况下，如果在我的应用程序中配置了用户秘密，在程序CS内部显示CreateDefaultBuilder时，它会加载那些
>>在环境变量之前，如果它存在，我们正在开发方法
所以我写了那个secrets.json，这是我的TwitterSecretKey，我会再运行一次
一切都在运行，它来了
我从我的secrets.json获取TwitterSecretKey，所以它没有提交到源代码控制中
而我的其他价值就在我的应用程序设置中，不应该使用，这是承诺的
我不在乎谁看到了
这是一个没有人真正需要注意的虚拟价值
保持我用于开发目的的数据更安全
所以你的开发连接字符串，把它们放在一个秘密的位置
所以人们不会踩到对方，他们也不会分享一些你不想公开的秘密价值观
因此，我怀疑如果您使用第三方提供商的密钥，您可能希望将它们保存在某个地方，Azure中的内容，如Azure Key保险库，或者
绝对
这是一个很好的提示
我们为您提供了Azure密钥保管库，您可以将这些密钥值放入这些第三方提供商
也许你的Twitter身份验证，你的Facebook身份验证
将这些密钥放入密钥保险库中，然后我们可以使用不同的提供商自动加载这些密钥
当你在生产空间时，它们会适用，非常酷的东西
但是我们现在正在做的事情也会在生产空间中发挥作用吗？
是的，你可以使用它
那些secrets.json文件，不会随你一起投入生产
用户秘密不会在生产中使用
但相反，您可以编写一个环境变量来覆盖生产空间内部
Azure App Service有一个控制台，您可以在其中编写您想要使用的环境变量
他们将覆盖这些价值观
好的，保持我们的钥匙安全，所以人们无法看到它
绝对没有办法让人们看到它
没办法，所以我不能做F12并尝试四处寻找并找到它？
是的，不
你不会看到它
这一切都在记忆中，隐藏在幕后
它不在磁盘上，也不会被发送到浏览器，除非你写出实际发出的东西
所以这有点关于你如何将东西传入和传出
我想要展示的最后一件事是，如果我想从默认警告更改类似日志级别的内容，也许我想将其设置为我的跟踪级别？
那么，这是一个更进一步的下降，它更层次，对吧？
它是日志记录，然后是日志级别，然后是默认值，我该如何设置该值？
我们所做的是我们可以将配置设置为以冒号分隔
它会降下来，它会在工作中读到它
那么让我回到我的项目属性中，我将定义另一个环境变量
这个将是Logging，LogLevel，Default，所以Logging，LogLevel，Default
它被冒号分开，现在我要将它设置为Trace
现在，当我运行我的应用程序时，我将发送所有跟踪级别信息
这就是一切，对吗？
-Traces几乎就是一切 - 跟踪几乎就是一切
而且你会得到所有的信息
所以我有一个完全不同级别的日志记录
我相信我们也可以在Visual Studio中查看它？
是的，如果您在此处配置了应用程序洞察，则可以在Visual Studio中查看此内容
- 我可以点击那个 - 我们谈到了这一点
我可以看到完全相同的日志信息，也是在跟踪级别发送的
所以很容易上手
并使用环境变量，用户秘密和应用程序设置JSON进行配置
然后，您可以使用配置然后使用方括号索引器读取这些值
这样您就可以将配置信息写入应用程序内部的不同类和不同功能
现在，配置对象默认使用依赖注入进行注册
我没有在启动时添加任何东西
它就在那里，所以我可以在页面或控制器内请求IConfiguration
它只适用于您的应用程序的所有配置
从那个启动页面剥离回来是很多的
所以我认为这就是我们对这个模块所拥有的一切
是的，我们这样做，这是对ASP.NET Core内部的深刻见解
我们希望您准备好去探索和玩弄更多
我们要快点休息一下，我们会稍后回来
希望你加入我们。